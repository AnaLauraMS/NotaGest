// server.js

// --- ImportaÃ§Ãµes ---
const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const path = require('path'); 
const connectDB = require('./config/mongoDb'); // Importa a funÃ§Ã£o de conexÃ£o com o banco de dados
const { protect } = require('./middleware/auth'); // Importa o middleware de autenticaÃ§Ã£o JWT
// Importa os roteadores da aplicaÃ§Ã£o
const userRoutes = require('./routes/userRoutes');
const arquivoRoutes = require('./routes/arquivosRoutes');
const imovelRoutes = require('./routes/imovelRoutes');
const uploadFileRoutes = require('./routes/uploadFileRoutes');

// --- ConfiguraÃ§Ã£o Inicial ---
// 1. Carrega variÃ¡veis de ambiente ANTES de tudo
dotenv.config(); 
console.log('[INFO] VariÃ¡veis de ambiente carregadas.');

// 2. Inicializa o Express
const app = express();
console.log('[INFO] AplicaÃ§Ã£o Express inicializada.');

// 3. Conecta ao MongoDB
connectDB(); // Inicia a conexÃ£o com o banco de dados

// --- Middlewares Globais ---
// Habilita o Cross-Origin Resource Sharing (CORS)
app.use(cors()); 
console.log('[INFO] Middleware CORS habilitado.');

// Habilita o parse de dados JSON no corpo das requisiÃ§Ãµes
app.use(express.json()); 
console.log('[INFO] Middleware express.json habilitado.');

// --- Rotas da API ---
console.log('[INFO] Configurando rotas da API...');
// Rotas de usuÃ¡rios (perfil e sincronizaÃ§Ã£o interna)
app.use('/api/users', userRoutes);
console.log(' Â  -> Rota /api/users registrada.');
// Rotas de arquivos (metadados)
app.use('/api/uploads', arquivoRoutes); 
console.log(' Â  -> Rota /api/uploads registrada.');
// Rotas de imÃ³veis (CRUD)
app.use('/api/imoveis', imovelRoutes);
console.log(' Â  -> Rota /api/imoveis registrada.');
// Rota dedicada ao upload do arquivo fÃ­sico
app.use('/api/uploadfile', uploadFileRoutes);
console.log(' Â  -> Rota /api/uploadfile registrada.');
console.log('[INFO] Rotas da API configuradas.');

// --- Rota para Servir Arquivos EstÃ¡ticos ---
console.log('[INFO] Configurando rota para servir arquivos estÃ¡ticos...');
// Define o caminho absoluto para a pasta de uploads no servidor
const staticFilesPath = path.join(__dirname, 'uploads');
console.log(` Â  -> Caminho base para arquivos estÃ¡ticos: ${staticFilesPath}`);

// Middleware de Log EspecÃ­fico para /uploads ANTES do protect/static
app.use('/uploads', (req, res, next) => {
    // Confirma que a requisiÃ§Ã£o para arquivos estÃ¡ticos estÃ¡ sendo processada
    console.log(`\n--- ðŸšš Rota /uploads recebendo pedido para: ${req.method} ${req.originalUrl} ---`); 
    // Loga o caminho relativo que serÃ¡ buscado na pasta 'uploads'
    console.log(` Â  -> Caminho relativo (req.path) a ser processado: ${req.path}`); 
    next(); 
});

// Aplica o middleware de autenticaÃ§Ã£o (protect) antes de servir o arquivo estÃ¡tico
app.use('/uploads', protect, express.static(staticFilesPath, {
    // Permite que requisiÃ§Ãµes que falhem (arquivo nÃ£o encontrado) passem para o handler 404
    fallthrough: true, 
    // Impede o acesso a arquivos ocultos (ex: .git, .env)
    dotfiles: 'deny' 
})); 
console.log('[INFO] Rota /uploads para arquivos estÃ¡ticos configurada com autenticaÃ§Ã£o.');

// --- Handler para Rotas NÃ£o Encontradas (404) ---
// Captura qualquer requisiÃ§Ã£o que nÃ£o foi tratada pelas rotas acima
app.use((req, res, next) => {
    // Log de alerta de rota nÃ£o encontrada
    console.warn(`Rota nÃ£o encontrada (404)`);
    console.warn(` Â  -> RequisiÃ§Ã£o: ${req.method} ${req.originalUrl}`);
    console.warn(` Â  -> IP Origem: ${req.ip}`);
    // Retorna a resposta 404
    res.status(404).json({ message: 'Recurso nÃ£o encontrado neste servidor.' });
});


// --- InicializaÃ§Ã£o do Servidor ---
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`\n[INFO] Servidor rodando e escutando na porta ${PORT}`);
    console.log(`[INFO] Pressione CTRL+C para parar o servidor.`);
});